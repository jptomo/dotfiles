# -*- mode: ruby -*-
# vi: set ft=ruby :

class MyInstaller < VagrantVbguest::Installers::Linux
  def install(opts=nil, &block)
    communicate.sudo("dnf check-update -q >> /dev/null 2>&1", opts, &block)
    communicate.sudo("dnf upgrade -y", opts, &block)
    communicate.sudo("dnf install -y kernel-devel-`uname -r` gcc make perl bzip2", opts, &block)
    super
  end

  def installer
    @installer ||= File.join(mount_point, 'VBoxLinuxAdditions.run')
    @installer = 'KERN_DIR=/usr/src/kernels/`rpm -qa | grep kernel-devel | sort -r | head -n 1 | sed -e "s/kernel-devel-//"` ' + @installer
  end
end


# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  # ftp://ftp.riken.jp/pub/Linux/fedora/releases/22/Cloud/x86_64/Images/Fedora-Cloud-Base-Vagrant-22-20150521.x86_64.vagrant-virtualbox.box
  config.vm.box = "Fedora-Cloud-Base-Vagrant-22-20150521.x86_64.vagrant-virtualbox.box"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  config.vm.synced_folder ".", "/vagrant", type: nil, mount_options: ["dmode=777", "fmode=666"]

  config.vbguest.installer = MyInstaller

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
    # Customize the amount of memory on the VM:
    vb.cpus = 4
    vb.memory = "8404"  # 8192
    vb.customize ["modifyvm", :id, "--cpuexecutioncap", "100"]
    vb.customize ["modifyvm", :id, "--paravirtprovider", "kvm"]
  end

  config.vm.provision "shell", :path => "misc/provision.sh", privileged: false
end
